{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","yScale","xScale","yAxisScale","xAxisScale","useState","data","setData","useEffect","a","fetch","response","json","console","log","fetchData","width","height","padding","svg","d3","attr","domain","d","range","length","datesArray","map","i","Date","generateScales","tooltip","style","selectAll","enter","append","on","html","replace","toLocaleString","pageX","pageY","document","querySelector","setAttribute","drawBars","xAxis","yAxis","call","generateAxes","className","id","x","y","transform","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.033e8887.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport './App.scss';\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [data, setData] = useState([]);   \n\n  useEffect(() => {\n    async function fetchData(){\n      const response = await fetch('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json');\n      const data = await response.json();\n      setData(data.data)\n      console.log(data.data)\n    } \n    fetchData()\n  }, [])\n\nlet yScale, xScale, yAxisScale, xAxisScale;\n\nlet width = 800;\nlet height = 600;\nlet padding = 60;\n\nlet svg = d3.select(\"svg\")\n\nconst drawCanvas = () => {\n  svg.attr(\"width\", width)\n     .attr(\"height\", height)\n};\n\nconst generateScales = () => {\n  yScale = d3.scaleLinear()\n             .domain([0, d3.max(data, (d) => d[1])])\n             .range([0, height - (2 * padding)]);\n\n  xScale = d3.scaleLinear()\n             .domain([0, data.length -1])\n             .range([padding, width - padding]);\n\n  let datesArray = data.map(i => new Date(i[0]))\n\n  console.log(datesArray)\n\n  xAxisScale = d3.scaleTime()\n                .domain([d3.min(datesArray), d3.max(datesArray)])\n                .range([padding, width - padding]);\n\n  yAxisScale = d3.scaleLinear()\n                 .domain([0, d3.max(data, (d) => d[1])])\n                 .range([height - padding, padding])\n};\n\nconst drawBars = () => {\n\n  let tooltip = d3.select(\"#tooltip\")\n                  .style(\"opacity\", 0)\n\n  svg.selectAll(\"rect\")\n     .data(data)\n     .enter()\n     .append(\"rect\")\n     .attr(\"class\", \"bar\")\n     .attr(\"width\", (width - (2 * padding)) / data.length)\n     .attr('data-date', (d) => d[0])\n     .attr('data-gdp', (d) => d[1])\n     .attr(\"height\", (d) => yScale(d[1]))\n     .attr(\"x\", (d, i) => xScale(i))\n     .attr(\"y\", (d, i) => (height - padding) - yScale(d[1]))\n     .on(\"mouseover\", (d, i) => {\n       tooltip.style(\"opacity\", 0.7)\n              .html(d[0].replace(/^(\\d{4})(-)(\\d{2})(-)(\\d{2})$/, \"$1$2$3\") + '<br/>$' + d[1].toLocaleString(\"en-US\"))\n              .style(\"left\",d3.event.pageX + 15 + \"px\")\n              .style(\"top\", d3.event.pageY + 15 + \"px\");\n\n       document.querySelector(\"#tooltip\").setAttribute(\"data-date\", d[0])\n     })\n     .on(\"mouseout\", (d) => {\n       tooltip.style(\"opacity\", 0)\n     })\n};\n\nconst generateAxes = () => {\n  let xAxis = d3.axisBottom(xAxisScale);\n  let yAxis = d3.axisLeft(yAxisScale);\n\n  svg.append(\"g\")\n     .call(xAxis)\n     .attr(\"id\", \"x-axis\")\n     .attr(\"transform\", 'translate(0, ' + (height-padding) + ')');\n\n  svg.append(\"g\")\n     .call(yAxis)\n     .attr(\"id\", \"y-axis\")\n     .attr(\"transform\", 'translate('+ padding +',0)' );\n};\n\nuseEffect(() => {\n  drawCanvas();\n  generateScales();\n  drawBars();\n  generateAxes();\n})\n\n  return (\n    <div className=\"App\">\n      <svg id=\"canvas\">\n        <text id=\"title\" x=\"50%\" y=\"7%\" dominant-baseline=\"middle\" text-anchor=\"middle\">United States GDP</text>\n        <text id=\"gdp\" x=\"-280\" y=\"85\" transform=\"rotate(-90)\">Gross Domestic Product</text>\n      </svg>\n      <div id=\"tooltip\"></div>\n      <br/>\n      <br/>\n      <span id=\"da3ker\">by da3ker</span>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}